"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
from config import env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.SECRET_KEY
IS_SERVER = env.IS_SERVER
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.DEBUG
TOLL_AMOUNT = int(env.TOLL_AMOUNT)
CRONJOB_TOKEN = env.CRONJOB_TOKEN
AUTH_USER_MODEL = 'user.User'

ALLOWED_HOSTS = ["*"]
INTERNAL_IPS = [
    "127.0.0.1",
]
INSTALLED_APPS = [
    # 'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'compressor',
    'debug_toolbar',
]
CUSTOM_APPS = [
    'cash',
    'user.apps.UserConfig',
    'order.apps.OrderConfig',
    'store.apps.StoreConfig',
    'api.apps.ApiConfig',
    'report',
    'warehouse',
    'postage',

]

INTERNAL_IPS = [
    '127.0.0.1',
    'localhost',
] # for django-debug-toolbar

SITE_NAME = 'Oson.express'
API_ALLOWED_URLS = {"127.0.0.1:8000": True, "ozar.uz": True, "Ozar.uz": True}
OPERATOR_BONUS_FOR_ADDITIONAL_SOLD = 500

DEVELOPER_TG_CHAT_ID = 6937180
PROJECT_NAME_FOR_EXCEPTION_BOT = "Oson.Express"
EXCEPTION_BOT_TOKEN = "5987201267:AAHUho2camKMj25dgdrGBC6-V3FPRl8Iby4"

def global_variables(request):
    return {
        'SITE_NAME': SITE_NAME,
        'SITE_ADDRESS': 'https://ozar.uz',
        'SITE_EMAIL': 'contact@mysite.com',
        'SITE_TEL': 'contact@mysite.com',
    }


THIRD_PART_APPS = [
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'drf_yasg',
    # 'channels',
    'nested_admin',
    'django_celery_beat',
    'django_celery_results',
    'tinymce',
]

INSTALLED_APPS += CUSTOM_APPS + THIRD_PART_APPS

CORS_ALLOW_ALL_ORIGINS = True


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',

]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'html'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'config.settings.base.global_variables',
            ],
            'libraries':  {
                'custom_filters': 'store.templatetags.custom_filters',
            }
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'
# ASGI_APPLICATION = "config.asgi.application"

# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [(f"redis://{env.REDIS_USER}:{env.REDIS_PASS}@{env.REDIS_HOST}:{env.REDIS_PORT}")],
#         },
#     },
# }

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'uz'

TIME_ZONE = 'Asia/Tashkent'

USE_I18N = True

USE_L10N = True

USE_TZ = False

DATA_UPLOAD_MAX_NUMBER_FIELDS = 2000

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CKEDITOR_JQUERY_URL = 'https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js'

CKEDITOR_UPLOAD_PATH = 'images/'
CKEDITOR_IMAGE_BACKEND = "pillow"

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': None,
    },
}


DJANGO_CELERY_BEAT_TZ_AWARE = False

# Sites = (
#     (1, 'premiumshop'),
#     (2, 'airshop'),
#     (3, 'mahsulot'),
#     (4, 'savdo24'),
# )

Sites = (
    ("0", "Elituvchi"),
    ("1", "Mahsulot.com"),
    ("2", "Airshop.uz"),
    ("3", "Savdo24.com"),
    ("4", "Mybazar24.uz"),
    ("5", "Mahsulot app"),
    ("6", "Premiumshop"),
    ("7", "My-bazar.com"),

)


if IS_SERVER:
    # from config.connection.send_developer import send_private_message_developer
    # send_private_message_developer(f"Is server calisti {IS_SERVER}")
    CSRF_TRUSTED_ORIGINS = ['https://megabot.uz', 'http://megabot.uz', 'https://zeno.uz', 'http://zeno.uz']
    ALLOWED_HOSTS = ["*"]
    # SESSION_COOKIE_AGE = 604800
    # os.environ['OPENBLAS_NUM_THREADS'] = '1'
    # SESSION_COOKIE_SECURE = True
    # SECURE_SSL_REDIRECT = True
    # CSRF_COOKIE_SECURE = True
    # ACCESS_TOKEN_LIFETIME = env.ACCESS_TOKEN_LIFETIME
    # REFRESH_TOKEN_LIFETIME = env.REFRESH_TOKEN_LIFETIME
    # SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    # ALLOWED_HOSTS = [
    #     "ahilshop.uz",
    #     "www.ahilshop.uz",
    #     "zeno.uz",
    #     "www.zeno.uz",
    # ]

# CSRF_TRUSTED_ORIGINS = ['*']

# Application definition
os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"


# STATIC_URL = '/static/'
# STATIC_ROOT = '/static/'
# STATICFILES_DIRS = [
#     BASE_DIR / 'static'
# ]
# STATICFILES_DIRS = os.path.join(BASE_DIR, 'static')
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
# ]
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]


# Bu ayar Django Compressor’ın aktif olup olmayacağını belirler.
# True ise Compressor CSS ve JS dosyalarını sıkıştırır, optimize eder.
# False ise Compressor hiçbir şey yapmaz, normal statik dosyalar çalışır.
# Production ortamında genellikle True olur.
# Geliştirme ortamında sıkıştırma süresi uzatmasın diye çoğu zaman False yapılır.
COMPRESS_ENABLED = False


# Geliştirme ortamında (COMPRESS_OFFLINE=False) değişiklikler anında yansır.
# Production ortamında (COMPRESS_OFFLINE=True) dosyalar önceden sıkıştırılır,
# değişiklik olursa tekrar "python manage.py compress" çalıştırılır.
# COMPRESS_ENABLED=True => Django Compressor aktif, False => devre dışı.
COMPRESS_OFFLINE = False


STATIC_URL = '/static/'
# STATIC_ROOT = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]


STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# MEDIA_ROOT = os.path.join(BASE_DIR, 'media').replace("\\", '/')
# MEDIA_URL = '/media/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# MEDIA_URL = '/media/'
# # MEDIA_ROOT = BASE_DIR / 'media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media'),
